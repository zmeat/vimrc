syntax on
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source $VIMRUNTIME/vimrc_example.vim

" behave mswin
source $VIMRUNTIME/mswin.vim
behave mswin

" Get out of VI's compatible mode.
set nocompatible

" Sets how many lines of history VIM have to remember
set history=400

" set theme
"set gfn=Consolas:h16:cANSI
"colorscheme wombat

" Enable filetype plugin
filetype on
filetype plugin on
filetype indent on

" Enable syntax
syntax enable

" Unset to auto read when a file is changed from the outside
" set autoread
set noautoread

" set errorformat
let orginalEFM = &errorformat
set errorformat=%f\|%l\|\ %m
set errorformat+=%f\|%l\ col\ %c\|\ %m
set errorformat+=%\\[0-9]%\\+>%f(%l)\ :\ error\ C%n:\ %m
set errorformat+=%*\\d>%f(%l)\ :\ error\ SA%n:\ %m
set errorformat+=%\\d%\\+>%f(%l)\ :\ error\ SA%n:\ %m
set errorformat+=%*\\d>%f(%l\\,%c)\ :\ error\ CS%n:\ %m
set errorformat+=%*[^:]:%*[^:]:\ error\ U%n:\ %
set errorformat+=%*[^:]:%*[^:]:\ error\ U%n:\ %m
set errorformat+=%f(%l)\ :\ error\ C%n:\ %m
set errorformat+=%f(%l\\,%c)\ :\ error\ CS%n:\ %m
let &errorformat = &errorformat . ',' . orginalEFM

" Have the mouse enabled all the time:
" set mouse=a

" Set mapleader
let mapleader = ","
let g:mapleader = ","

" Define the autocmd group
augroup vimrc

" When _vimrc/_exrc is edited, reload it
autocmd! BufWritePost _vimrc execute 'source %'
autocmd! BufWritePost _exrc execute 'source %'

" Change the default constant color
highlight Constant gui='bold' guifg='Gray'

" Set the color of tab key
highlight SpecialKey gui='bold' guifg='DarkGray'

" Set the cursor line
"highlight CursorLine ctermbg='Gray'
" set cursorline

" Set the encoding
set encoding=utf-8
" language messages utf-8

" Set the options
set autoindent
set fileencodings=utf-8,ucs-bom,latin1
set guifont=Consolas:h14:cANSI
set printfont=Consolas:h14:cANSI
set laststatus=2
set lazyredraw
set linespace=2

" make white space visiable
set list
" show tab char as ">.", show trailing white space as "+"
set listchars=tab:>.,trail:+

" set search ignore case
set ignorecase

set incsearch

" no backup file
set nobackup
" change write behavior
set nowritebackup
" no swap file
set noswapfile

" expand tab to be space chars
" set expandtab
set tabstop=4
set shiftwidth=4

" I don't want to expandtab for some filetypes
autocmd FileType make       set noexpandtab
autocmd BufEnter *.aspx     set noexpandtab
autocmd BufEnter *.ascx     set noexpandtab

" I want to expandtab for some file types
autocmd FileType python     set expandtab

" show line number
set number

set scrolloff=3

set smartindent
set hlsearch

" status line
set statusline=%F%m%r%h%w\ %y\ [Row=%l,Col=%v]\ [%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=magenta
  elseif a:mode == 'r'
    hi statusline guibg=blue
  else
    hi statusline guibg=red
  endif
endfunction

"au InsertEnter * call InsertStatuslineColor(v:insertmode)
"au InsertLeave * hi statusline guibg=green

" default the statusline to green when entering Vim
"hi statusline guibg=green

" Turn on folding
set foldenable
" Make folding indent sensitive
set foldmethod=indent
" Don't autofold anything (but I can still fold manually)
set foldlevel=100

" Force show menu in English
source $VIMRUNTIME/delmenu.vim
set langmenu=en
source $VIMRUNTIME/menu.vim

highlight Pmenu guibg=#2f4f4f

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common function begins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! s:SID()
    return matchstr(expand('<sfile>'), '\zs<SNR>\d\+_\zeSID$')
endfunction

function! s:EchoException()
    let l:msg = substitute(v:exception, "^[^:]*:", "", "")
    call s:EchoError(l:msg)
endfunction

function! s:EchoError(msg, ...)
    if len(a:000) > 1
        throw 'Too many arguments to call EchoError'
    endif
    echohl ErrorMsg
    echo a:msg
    echohl None
    let l:freeze = 0
    if len(a:000) == 0
        let l:freeze = 1000
    else
        let l:freeze = a:0
    endif
    if l:freeze == 0
        return
    endif
    execute "sleep " . l:freeze . "m"
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Common function ends
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Using Ctrl-TAB to change tab window
" noremap <silent> <C-TAB> <C-\><C-N>:tabnext<CR>
" inoremap <silent> <C-TAB> <C-\><C-N>:tabnext<CR>

" Using Ctrl-w to toggle listchars
" noremap <silent> <C-W> <C-\><C-N>:let &list = !&list<CR>

" Keep the insert mode
inoremap <silent> <C-W> <C-O>:let &list = !&list<CR>

autocmd! BufEnter * call <SID>RestoreCursorLine()
autocmd! BufNew * setlocal cursorline
"autocmd! BufLeave * call <SID>SaveAndHideCursorLine()

"function! <SID>SaveAndHideCursorLine()
"    let b:oldCursorLine = &cursorline
"    setlocal nocursorline
"endfunction

function! <SID>RestoreCursorLine()
    if exists('b:oldCursorLine')
        let &cursorline = b:oldCursorLine
        unlet b:oldCursorLine
    endif
endfunction

" Set the diff color
" highlight DiffAdd guibg='#CCCC00' guifg='black'
" highlight DiffDelete guibg='#CC0000' guifg='black'
" highlight DiffChange guibg='#007700'

" maximize gvim window
autocmd GUIEnter * simalt ~x

augroup END

" look for 'tags' file in current directory and up to root.
set tags=tags;/
map <C-N> :tnext<CR>
map <C-P> :tprevious<CR>
map <C-I> g<C-]>

function! UPDATE_TAGS()
  let _f_ = expand("%:p")
  let _cmd_ = '"ctags -a -f /dvr/tags --c++-kinds=+p --fields=+iaS --extra=+q " ' . '"' . _f_ . '"'
  let _resp = system(_cmd_)
  unlet _cmd_
  unlet _f_
  unlet _resp
endfunction

"autocmd! BufWritePost *.cs call UPDATE_TAGS()


" set shortcut for navigation among tabs in term mode.
"map <C-t> :tabnew<CR>
map <C-left> :tabp<CR>
map <C-right> :tabn<CR>
" windows term doesn't understand <C-PageUp>, so I literally input Ctrl+PageUp
" and Ctrl+PageDown below.
map ¿ :tabp<CR>
map Î :tabn<CR>

" TagList
"map <leader><F5> :TlistOpen<CR>
"map <leader><F6> :TlistClose<CR>

" Project
"map <leader><F7> :Project<CR>
"map <C-F8> :bdelete ~\.vimprojects<CR>
map <leader><F7> :NERDTree<CR>

" NERD Tree
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" Search: http://vim.wikia.com/wiki/Find_in_files_within_Vim
" disable autocmd to improve performance
" search current directory recursively for exact word match
" map <leader>s :execute "noautocmd vimgrep /\\<" . expand("<cword>") . "\\>/gj **/*." .  expand("%:e") <Bar> cw<CR>
map <leader>vga :execute "noautocmd vimgrep /\\<" . expand("<cword>") . "\\>/gj **/*.*" <Bar> cw<CR> 5 <CR>
map <leader>vgl :execute "noautocmd vimgrep /\\<" . expand("<cword>") . "\\>/gj " . expand("%") <Bar> cw<CR> 5 <CR>

nnoremap <leader>vg :vimgrep //gj **/* <Bar> cw<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" Ctrl-N & Ctrl-P to go through quick fix list
map <C-N> :cn<CR>
map <C-P> :cp<CR>

" external program for ":grep" command
set grepprg=grep
"map <leader>g :execute "grep -nR " . expand("<cword>") <Bar> cw<CR> 5<CR>
"map <leader>g :execute "grep -nR " . expand("<cword>") . " --exclude-dir=obj* --include=*.cs --include=*.strings ." <Bar> cw<CR> 5 <CR>


" refactor

" short cut to subsititue word under cursor
nnoremap <leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" toggles the quickfix window.
"command -bang -nargs=? QFix call QFixToggle(<bang>0)
"function! QFixToggle(forced)
"  if exists("g:qfix_win") && a:forced == 0
"    cclose
"    "unlet g:qfix_win
"  else
"    copen 10
"    let g:qfix_win = bufnr("$")
"  endif
"endfunction

"map <leader>qf :QFix<CR>

" make yank-ed content availaboe for Windows clipboard
set clipboard=unnamed
set go+=a


hi Comment ctermfg=darkgreen

nmap <C-M> :w<CR>:make<CR>:cw<CR>

nmap    w=  :resize +3<CR>
nmap    w-  :resize -3<CR>
nmap    w,  :vertical resize -3<CR>
nmap    w.  :vertical resize +3<CR>
